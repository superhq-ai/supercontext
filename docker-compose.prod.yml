services:
  # PostgreSQL
  postgres:
    image: pgvector/pgvector:pg15
    container_name: supercontext-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-supercontext}
      POSTGRES_USER: ${POSTGRES_USER:-supercontext}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-supercontext} -d ${POSTGRES_DB:-supercontext}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - supercontext-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: supercontext-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - supercontext-network
    restart: unless-stopped

  # API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    container_name: supercontext-api-prod
    env_file:
      - apps/api/.env
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - supercontext-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Web
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: production
    container_name: supercontext-web-prod
    env_file:
      - apps/web/.env
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - supercontext-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M



  # Nginx
  nginx:
    image: nginx:alpine
    container_name: supercontext-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - supercontext-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  supercontext-network:
    driver: bridge 